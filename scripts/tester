#!/usr/bin/python
"""
Copyright (c) 2014, Intel Corporation

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer. 

* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution. 

* Neither the name of Intel Corporation nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission. 

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 

@file    mobdat
@author  Mic Bowman
@date    2013-12-03

This is the main script for running the mobdat mobile data simulator.

"""

import sys, os
import logging, warnings

sys.path.append(os.path.join(os.environ.get("OPENSIM","/share/opensim"),"lib","python"))
sys.path.append(os.path.realpath(os.path.join(os.path.dirname(__file__), "..")))
sys.path.append(os.path.realpath(os.path.join(os.path.dirname(__file__), "..", "lib")))

import json, argparse
import cmd, readline, traceback
import re

from mobdat.common import NetworkSettings, NetworkInfo, BusinessInfo, PersonInfo, LocationInfo

DataBindings = None
logger = logging.getLogger(__name__)

# -----------------------------------------------------------------
# -----------------------------------------------------------------
def ParseConfigurationFile(cfile) :
    try :
        config = json.load(open(cfile))
    except IOError as detail :
        warnings.warn("Error parsing configuration file %s; IO error %s" % (cfile, str(detail)))
        sys.exit(-1)
    except ValueError as detail :
        warnings.warn("Error parsing configuration file %s; value error %s" % (cfile, str(detail)))
        sys.exit(-1)
    except NameError as detail : 
        warnings.warn("Error parsing configuration file %s; name error %s" % (cfile, str(detail)))
        sys.exit(-1)
    except :
        warnings.warn('Error parsing configuration file %s; %s' % (cfile, sys.exc_info()[0]))
        sys.exit(-1)

    return config

# -----------------------------------------------------------------
# -----------------------------------------------------------------
def SetupLoggers() :
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)

    logfile = filename=os.path.join(os.path.dirname(__file__), "../logs/mobdat.log")
    flog = logging.FileHandler(logfile, mode='w')
    flog.setFormatter(logging.Formatter('%(levelname)s [%(name)s] %(message)s'))
    logger.addHandler(flog)

    clog = logging.StreamHandler()
    clog.addFilter(logging.Filter(name='mobdat'))
    clog.setFormatter(logging.Formatter('[%(name)s] %(message)s'))
    clog.setLevel(logging.WARN)
    logger.addHandler(clog)

# -----------------------------------------------------------------
# -----------------------------------------------------------------
class TestController(cmd.Cmd) :
    pformat = 'tester> '

    # -----------------------------------------------------------------
    def __init__(self, logger) :
        cmd.Cmd.__init__(self)

        self.prompt = 'tester> '
        self.__Logger = logger

    # -----------------------------------------------------------------
    def postcmd(self, flag, line) :
        return flag

    # -----------------------------------------------------------------
    def do_person(self, args) :
        """stopat iteration
        Stop sending timer events and shutdown the simulator after the specified iteration
        """
        pargs = args.split()
        if pargs[0] == 'list' :
            pattern = re.compile(pargs[1] if len(pargs) == 2 else '.*', re.IGNORECASE)
            for pname in DataBindings['perinfo'].PersonList.iterkeys() :
                if pattern.match(pname) : print pname
        elif pargs[0] == 'dump' :
            for name in pargs[1:] :
                if name in DataBindings['perinfo'].PersonList :
                    print json.dumps(DataBindings['perinfo'].PersonList[name].Dump(), indent=4)

    # -----------------------------------------------------------------
    def do_business(self, args) :
        """business
        Stop sending timer events and shutdown the simulator after the specified iteration
        """
        pargs = args.split()
        if pargs[0] == 'list' :
            pattern = re.compile(pargs[1] if len(pargs) == 2 else '.*', re.IGNORECASE)
            for pname in DataBindings['bizinfo'].BusinessList.iterkeys() :
                if pattern.match(pname) : print pname
        elif pargs[0] == 'dump' :
            for name in pargs[1:] :
                if name in DataBindings['bizinfo'].BusinessList :
                    print json.dumps(DataBindings['bizinfo'].BusinessList[name].Dump(), indent=4)

    # -----------------------------------------------------------------
    def do_exit(self, args) :
        """exit
        Shutdown the simulator and exit the command loop
        """

        self.__Logger.warn("shutting down")
        return True

    # -----------------------------------------------------------------
    def do_shutdown(self, args) :
        self.do_exit(args)

# -----------------------------------------------------------------
# -----------------------------------------------------------------
def InitializeDataBindings(settings) :
    netinfofile = settings["General"].get("NetworkInfoFile","netinfo.js")
    logger.info('loading network data from %s',netinfofile)
    netinfo = NetworkInfo.Network.LoadFromFile(netinfofile)

    # load location information
    locinfofile = settings["General"].get("LocationInfoFile","locinfo.js")
    logger.info('loading location data from %s',locinfofile)
    locinfo = LocationInfo.LocationInfo.LoadFromFile(locinfofile, netinfo)

    # write the business information out to the file
    bizinfofile = settings["General"].get("BusinessInfoFile","bizinfo.js")
    logger.info('loading business data from %s',bizinfofile)
    bizinfo = BusinessInfo.BusinessInfo.LoadFromFile(bizinfofile, locinfo)

    # write the person information out to the file
    perinfofile = settings["General"].get("PersonInfoFile","perinfo.js")
    logger.info('loading person data from %s',perinfofile)
    perinfo = PersonInfo.PersonInfo.LoadFromFile(perinfofile, locinfo, bizinfo)

    global DataBindings
    DataBindings = {"netinfo" : netinfo, "locinfo" : locinfo, "bizinfo" : bizinfo, "perinfo" : perinfo}

# -----------------------------------------------------------------
# -----------------------------------------------------------------

def Main() :
    SetupLoggers()

    # parse out the configuration file first
    parser = argparse.ArgumentParser()
    parser.add_argument('--config', help='configuration file for simulation settings', default='settings.js')
    (options, remainder) = parser.parse_known_args()
    
    settings = ParseConfigurationFile(options.config)
    InitializeDataBindings(settings)

    controller = TestController(logger)
    controller.cmdloop()

if __name__ == '__main__':
    Main()
